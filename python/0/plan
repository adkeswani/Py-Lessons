- Introduction:
    - Introductions, volunteers and myself
    - Aim: Introduce you to OO programming and the Python programming language
    - Each section: Explanation of topic, will ask you questions, coding exercises at the end
    - Ask questions: Others might be wondering the same thing and it could help everyone
    - If you finish the exercises early: 
        - Play with code, 
        - I'll ask for demonstrations of anything interesting
        - Talk to volunteers about CSE if not helping anyone

- Setup:
        - Download files
        - Opening up editor (what are we using?)
            - Set up indenting
            - Set up zoom on my screen
        - Opening a terminal
        - Navigating around the filesystem 
            - Brief detour into the Unix filesystem
        - Explain directories and files for each section
        - Ask about everyone's level of experience with OO

- Intro to OO:
    - First, OO concepts in plain English, then Python

    - Classes:
        - OO: Consider everything in terms of objects and the interactions between them
        - Example:
            - Ask for an object
            - Ask what makes up the object => data fields
            - Ask what the object can do => methods. Like procedures, can be passed arguments.
        - Descriptions of object == class, they define a class of objects. 
        - One of these objects == instance of class, or just an object
        - How you can use an instance *give examples*:
            - Call its methods
            - Modify its data fields
            - Store it in a variable
            - Call a method using the object as a parameter
            - It's just like a value in any data type, like integers or strings

    - Subclasses:
        - May have multiple slight variations on a class
        - Example:
            - Based on our earlier object
            - Ask for alternative breakdowns
            - When programming, chose whatever makes the most sense
            - Draw it up
        - Have all common stuff in one class
        - And base new classes on this *give example* == subclass
        - Common class == superclass or parent class
        
    - Inheritance and overriding:
        - Special: Subclasses inherit data fields and methods from superclass *give example*
        - Can write method with same name and arguments to replace existing one == overriding
        - Changes behaviour of subclass
        - Overall allows us to avoid copying code
        - Ask:
            - What to override in our subclasses?

    - Polymorphism:
        - Example:
            - Suppose we have a Vehicle class:
                - Ask: Data fields, methods
            - And TwoWheel and FourWheel subclasses
            - Then a SpeedCamera class with an isOverLimit() method
            - Method takes a vehicle and tells you if its over some limit
            - Needs to support TwoWheel and FourWheel
            - Ask: An existing way you know how to do this?
            - Instead, write method that takes a Vehicle
            - Method will use the getSpeed method() from Vehicle
        - Will work because of polymorphism:
            - Subclasses take on multiple types *example*
            - Both the parent class and the subclass type
        - Want to keep methods as general as possible:
            - Superclasses rather than subclasses
            - Flexibility, e.g. new ThreeWheel class
        - Ask:
            - Methods for our original object superclass?
            - And methods only sensible for the subclass?

    - Public vs. private vs. protected:
        - Our Vehicle has speed data field, integer
        - Anyone could subclass and change it, e.g. store a banana there instead
        - Breaks our isOverLimit(). How to avoid?
        - Languages give you access control
        - Can choose what subclasses can/can't change
            - Data fields
            - Overriding methods
        - Private: Subclasses can't change it
        - Public: 




    - Exercises
        - Since we haven't gotten into any code yet, there's no exercises yet, but we've gone through a few terms so I'm going to ask questions about them instead
        - What is:
            - A class
            - A data field
            - A method
            - A subclass
            - Inheritance
            - Polymorphism
        - OK, so that's a really brief intro to OO programming. There's a lot more to it, such as abstract classes, interfaces, design patterns, and more. Some of these will come up in the rest of this workshop, others you'll learn as you start doing other OO programming and in uni courses.
        - Questions so far?
        - OK, so now we'll move onto how this all happens in Python

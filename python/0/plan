Time: 50 mins

- Prior setup:
    - Set displays to mirrored
    - NEVER use FULLSCREEN in Pygame
    - Put laptop with lesson open next to monitor, readable size.
    - Tell BradH when to order pizza
    - Take cups up with lunch

- Introduction: - 3 min
    - Introductions, volunteers and myself
    - Aim: Introduce you to OO programming and the Python programming language
    - Each section: Explanation of topic, will ask you questions, coding exercises at the end
    - Ask questions: Others might be wondering the same thing and it could help everyone
    - Will be moving FAST, lots to cover, try and bash out the exercises fast to see if you know what you're doing, come back and fix syntax later

- Setup: - 7 min
    - Everyone, be careful with cables under the desks
    - Log in, ensure you use the correct numbered account, 00 - 09
    - Download files
    - Opening up editor, *ask if people know vim*, otherwise xCode
        - Set up indenting, *Go to Xcode menu, Preferences, Indentation, make sure tab width is 4 inserting spaces (unchecked)*
        - Creating a new file, need to specify location and filename, usually in same folder as current lesson
    - Opening a terminal - iTerm, I'll be using vim to edit/demonstrate
    - Set up zoom on my screen
    - Navigating around the filesystem on terminal, explain directories and plan file

- Intro to OO: 
    - First, OO concepts in plain English, then Python

    - Classes: - 10 min
        - OO: Consider everything in terms of objects and the interactions between them
        - Example:
            - Ask for an object
            - Ask what makes features the object has, what is it made up of => data fields
            - Ask what the object can do => methods. Like procedures, can be passed arguments.
        - Descriptions of object == class, they define a class of objects. 
        - When you have one of these objects == instance of class
        - How you can use an instance *give examples*:
            - Call its methods
            - Modify its data fields
            - Store it in a variable
            - Call a method using the object as a parameter
            - It's just like a value in any data type, like integers or strings
        - To summarise:
            - An object is a thing
            - A class is a description of the thing
            - An instance is actually one of these things

    - Subclasses: - 5 min
        - May have multiple specialised versions of an object
        - Example:
            - Based on our earlier object
            - Ask for alternative breakdowns
            - When programming, choose whatever makes the most sense
            - Draw it up
        - Have all common stuff in one class
        - And base new classes on this *give example* == subclass
        - Common class == superclass or parent class
        
    - Inheritance and overriding: - 3 min
        - Implied : Subclasses inherit data fields and methods from superclass *give example*
        - Can write method with same name and arguments to replace existing one == overriding
        - Changes behaviour of subclass
        - Can also add extra methods and data fields
        - Ask:
            - What to override/add in our subclasses?
        - Overall allows us to avoid copying code

    - *Ask if any questions so far*

    - Polymorphism: - 10 min
        - Example:
            - Suppose we have a Vehicle class:
                - Ask: Data fields, methods
            - And TwoWheel and FourWheel subclasses
            - Then a SpeedCamera class with an isOverLimit() method
            - Method takes a vehicle and tells you if its over some limit
            - Needs to support TwoWheel and FourWheel
            - *Ask: An existing way you know how to do this?*
            - Instead, write method that takes a Vehicle
            - Method will use the getSpeed method() from Vehicle
        - Will work because of polymorphism:
            - Subclasses take on multiple types *example for Vehicle case*
            - Both the parent class and the subclass type
        - Ask:
            - Methods for our original object superclass?
            - And methods only sensible for the subclass?
        - Want to keep methods as general as possible:
            - Superclasses rather than subclasses
            - For flexibility, e.g. new ThreeWheel class

    - Access control: - 3 min
        - Our Vehicle has speed data field, integer
        - Anyone could subclass and change it, e.g. store a banana there instead
        - Breaks our isOverLimit(). How to avoid?
        - Languages give you access control
        - Can choose what subclasses can/can't change:
            - Data fields
            - Overriding methods
        - Public: Anything can read it, write to it, override it in the case of methods
        - Private: Opposite, nothing can read, write except code inside the class itself, can't be overridden
        - Other levels of access to restrict access to certain parts of the code, will talk about how its done in Python later in the workshop

- Exercises - 10 min
    - No code, so no exercises yet.
    - But to review, Ask: Can you explain in your own words and give an example of:
        - A class
        - A data field
        - A method
        - A subclass
        - Inheritance
        - Overriding
        - Polymorphism
    - Explained some concepts of OO programming
    - Others in rest of workshop, when you learn other languages, in uni courses
    - Questions so far?
    - Onto Python

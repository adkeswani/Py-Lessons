- Access control - 7 mins
    - Remember access control was about preventing changes to data fields and overriding methods from outside the class
    - Other languages use keywords like public and private next to the data fields and methods, then the compiler will prevent modifications
    - In Python, we rely more on trusting that people want to use your code properly

    - *Open private.py*:
    - Syntax for private data fields and methods is to put __ in front, we'll look at __secret and showSecret first
    - *Open interpreter, try showSecret, works as expected, try __secret, doesn't work*
    - So we have what we want, accessible from inside only
    - *dir the Answer, show what it has become*
    - What it's actually done is the class is prefixed on the front, called name mangling
    - *Access it with this, can read and write*
    - So rather than enforce it, tells people using/subclassing, this is private, don't modify it or it will break
    - *Show private.py*, methods work similarly, __changeSecret will also be mangled
    - *Create a NewAnswer, dir() it*
    - So in NewAnswer where we try to override it, instead of changing Answer's changeSecret, creates a new one, which is also mangled
    
    - Other languages also have a "protected" level of access
    - Equivalent of only allowing subclasses or code inside the same module to have access
    - Convention in python is to put single underscore, and this doesn't even mangle the name
    - Again, it trusts people rather than enforcing it, we assume that people don't want to break everything
    
- References: - 8 mins
    - One slightly confusing concept that trips up people is references
    - *Demonstrate using references.py, ask what they expect to happen then run it*
    - *Draw the below on board*
    - l does not actually contain the list, it only points to the list in memory, think of it as storing its memory location, this is known as a reference
    - Assigning l to m only assigns this memory location, so both are pointing at same memory location and same instance of list, so changing m changes l
    - Same happens with all other objects, e.g. if we created a Vehicle, then assigned it to another variable, it would again be pointing at the original Vehicle
    - *Open references2.py, ask what happens here, run it*
    - Same happens when we pass an object as an argument, passes the memory location, so changes made inside method will affect original object
    - Python has ways to copy the entire object rather than just memory location. This is called deep copying, so look it up if interested.
    - There are built-in ways to copy lists, just use the list() method on the list to copy, *demonstrate in references.py*, same for tuples
    - But note that if the list contains other objects, like lists, dictionaries or custom objects like Vehicles, modifying THOSE will modify the ones in original list, because again, the list only stores references to the objects
    - *Open references.py, ask, finally to confuse you more, why is it that when I change m[2], l[2] doesn't change? I'm changing the object right?*
    - *Ask if any questions*

- Try/except blocks: - 7 mins
    - Going to show you exception handling, which some might already be familiar with
    - When an error occurs, *demonstrate converting banana to an int*, notice this Error here
    - This error is known as an exception, and creating one is known as throwing or raising an exception
    - Instead of crashing, can detect this exception and do something to handle it, known as catching or handling the exception
    - *Open illegalBanana.py*, syntax for exception handling:
        - try keyword, usual colon and indent
        - Then lines where exception could occur
        - Outdent, except, the specific error you're trying to catch, then usual colon and indent
        - And then code to handle it
    - Can leave out the error, but almost never want to do that, because you might be hiding an unexpected error that will bite you later

    - Can also throw your own error, *add exception inside except*, syntax:
        - raise, the type of exception, then a message
    - As you can see, can also catch one exception and throw another, *demonstrate*

    - This was just basic exception handling
    - Many types of errors for other situations too, e.g. IOErrors when something goes wrong with files, should throw most appropriate one
    - Actually, exceptions are also objects so you can just subclass your own
    - Also there are keywords to control flow around an exception, such as code that only executes if exception doesn't happen or cleanup code that happens even if another exception gets thrown

- Methods for operators - 4 mins
    - *Show dir on int*
    - When you add 2 integers with + operator, Python actually calls a method, __add__(self, other) where the addition is done
    - Other operators have similar methods and the other types implement these methods too
    - When calling print on an object the __str__(self) method is called, should return a human-readable string representation of it
    - *Show MyInt example, uses some of these methods, also use type on result*
    - So we can implement these methods for our classes too
    - There are other similar methods Python calls for certain things that all have the underscores, might call them special methods:
        - A class's __cmp__ method is called to compare instances of it, used for testing equality and for sorting
        - A class can implement the __iter__ method to allow it to be used in for loops
        - Read about them in docs

- Exercise 4a: - 10 mins incl. expl. soln.
    - RomanNumeral class, works on integers from 1 to 10 inclusive, *ensure everyone knows them*
    - Constructor will take an integer, string, or float, if number is below 1 or above 10, throw a ValueError
    - Using print on it will return a string with the number in Roman numerals
    - Add and subtract operators should work using __add__ and __sub__, if it goes below 1 or above 10, throw a ValueError again
    - *Ask for some good test cases*

- File objects - 4 mins - TODO
    - There is another built in type I didn't cover, the file
    - To open a file, built-in called open(), this returns a file object

    - To read, only need filename argument to open()
    - Then can read from the file in multiple ways:
        - Using a for loop can go through its lines 1 by 1, where a line is one that ends in a newline
        - *Open docs.python.org/library/stdtypes.html go to read, readline*, also other methods that can:
            - Get you specific number of bytes
            - Get just one line
            - Put all lines in a list
        - Note that when you read from file, it advances the file forwards, so next time you read, will be from after the previous line read

    - To write, you need a second argument, which is a string to say what mode to open the file in:
        - If you send "w", it empties the file and starts writing from the beginning
        - If you send "a", it appends to end of the file
        - And as a sidenote, if you send "r", it opens the file for reading, but don't need this

    - For writing, *continue on stdtypes page*
        - Can use the file's write method to write a single string
        - Note that strings must have \n, the character for a new line, inside it to add newlines, *demonstrate*
        - Otherwise keeps writing on the same line
        - Can use writelines to write each string in a sequence to the file
    - After writing, you must call the file's flush method or its close method
    - When you write, doesn't necessarily go to disk, might be stored in a buffer in memory first
    - Flush flushes out this buffer, as does close
    - When you're completely done with a file, call close on it, this frees up the resources associated with the file

    - There are also other modes including ones for reading and writing at the same time, binary mode for opening non-text files like images or zip files or whatever
    - There is also a better way to open files that automatically closes files for you, it is called a context manager, I chose to teach this way as it uses more familiar syntax

- Comments and Docstrings - 3 mins
    - Speaking of comments, we've seen how to do single line comments
    - *Open docstrings.py*
    - To do a multiline comment, type """ at the correct indentation level, then the comment
    - If a multiline comment is the first line of a method, class or module, it becomes its "docstring"
    - *Open interpreter, demonstrate help and __doc__*
    - Then if you use help on it, shows it to you nicely, and __doc__ returns the comment as a string
    - There are conventions about how to write these comments properly, can read about them online
    - Useful for documenting your code
 
- Default arguments + None - 4 mins
    - Possible to provide default values for arguments, just put = value afterwards
    - Means that in the call, won't need to provide a value
    - *Show optimus.py*, an example of default arguments, *demonstrate*
    - Any arguments with default values must be after those without in argument list
    - So if I make it compulsory to have a weapon, it complains, *demonstrate then revert*

    - Now, at the moment we ignore the weapon if it is not provided using False and a condition to check it
    - Nicer way is similar to C's NULL, called None
    - None does nothing, is considered False in a condition, it makes more sense than False, which could have some other meaning
    - Useful where you want a nothing value, perhaps so you know to fill it with something
    - *Change and demonstrate*

- Exercise 4b:
    - Modify the encoder from before to work on files instead
    - Let the constructor remain the same
    - Let encode take an existing filename to read from and a new filename to write encoded data to
    - Let decode take an existing filename to read encoded from and a new filename to write decoded data to

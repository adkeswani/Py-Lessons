- Introduction
        - Introduce yourself and the volunteers
        - Today I aim to introduce you to OO programming and the Python programming language
        - I'm going to do some explaining, asking you questions along the way and then after each topic there'll be some coding exercises
        - PLEASE ask questions along the way, because others might be wondering the same thing and it could help everyone


- Setup
        - Download the files
        - Opening up XCode (are we using this?)
        - Opening a terminal
        - Navigating around the filesystem (brief detour into the Unix filesystem?)
        - Explain what each of the directories and files we will be using are for
        - Ask how much experience people have with OO. Based upon this can decide what speed to progress at


- Intro to OO
        - We'll start off by defining some basic concepts of OO without code, and then we'll move onto how to implement them in Python

        - Classes
                - Basically in OO we consider everything in terms of objects and the interactions between them
                - Let's start just by coming up with a simple object (ask someone to choose an object)
                    - Try and choose something such that the fields are also objects
                - Then ask how they would describe that object. These are known as the data fields of that object
                - Then ask what that object can do, or perhaps what can be done with the object. These are known as the methods of the object. And you can happily pass these arguments just like procedures in non-OO languages.
                - Together, these descriptions form a class, they define a class of objects. And when you actually have one of these objects, we call it an instance of that class.
                - Now these instances become just like the values for other data types. So just like 5 is an integer value, an instance of a class is like a value of that class. 
                - These instances can be used just like that integer, you can store them in a variable, then you can pass them as a parameter to a method, and you can store them in the data field of another object. For example, *come up with example based on the object we chose, show how you can store it, pass it around to method calls and then show that one of the fields in the object can have an object stored in it.*

        - Subclasses
                - Now, usually you can group some of these instances together. For example, for a class defining Vehicles, you could group them into 2 wheel and 4 wheel vehicles. 
                - Ask them for a similar breakdown of whatever class we designed above. Ask for multiple alternatives for the breakdown. Tell them that we use whatever makes the most sense.
                - Then ask for further breakdowns of the class. Draw it up on the board with non-permanent marker (!)
                - OK, so these more specific classes are called the subclasses of the more general ones. And the general classes are called the superclasses, or parent classes, of the more specific ones.

        - Inheritance
                - The special thing about subclasses is that they inherit all of the data fields and methods of the superclass
                - *Pick a superclass we chose earlier* So the subclasses of this class will inherit the data fields and methods of this one
                - So suppose this superclass has a *pick a data field* data field, then all of these subclasses will also have this data field. And similarly, any method you can call of this superclass can be called on its subclasses





[MAY CUT THIS BIT OUT
        - Abstract classes
                - Find a class that makes more sense as an abstract class, resort to the Vehicle example if you have to
                - OK, but this class, it wouldn't really make much sense to just have an instance of this class on its own, not when we've got the more specific class here
                - It just doesn't make sense, there's not enough detail in this class of objects for us to want to use it
                - Therefore, we have something called an abstract class
                - You cannot create an instance of an abstract class, you can only create a subclass of it
                - So this class we have here, we would make it into an abstract class, and so we're making it clear that we don't want to be having instances of these objects, we just want it to be subclassed
MAY CUT THIS BIT OUT]





        - Polymorphism
                - This inheritance is pretty useful. Let's suppose we wanted to write a SpeedCamera class that could take one of our TwoWheel or FourWheel vehicles from earlier and check if its speed was over a certain limit
                - So we'd have a method in this SpeedCamera class for doing this. What kind of parameters might you want for this method? (Aiming for a TwoWheel/FourWheel object and a speed limit)
                - Let's call this method isOverLimit()
                - Now, we don't really want to write 2 methods, one for 2 wheel and one for 4 wheel vehicles, because we're lazy and we know that both these subclasses would have inherited some sort of speed data field or method from the Vehicle class
                - So instead of writing 2 methods that take in the 2 separate classes, we write one that takes in the superclass, Vehicle.
                - Then this just checks the speed data field that is common to both 2 wheel and 4 wheel vehicles that came from the Vehicle superclass
                - So what you see here is that wherever you pass in a Vehicle, you can pass in one of its subclasses instead
                - Being able to use subclasses in this way is called polymorphism. This basically means that subclasses can take on multiple types: our TwoWheel object is of the type TwoWheel and also of type Vehicle and can be used as either.
                - When you're coding in OO, you generally WANT to keep it as general as possible, you want to allow methods to accept superclasses rather than subclasses, because as we just saw, it leaves us more flexible.
                - Say we created a new subclass like 3 wheel vehicle. Our SpeedCamera will still work with this because it only needs a Vehicle.
                - So suppose we take this set of classes, can someone give me an example of a method we'd write for the superclass rather than the subclasses? And now how about one that would only make sense for *this subclass*?

        - Benefits (briefly)
                - OK, so finally, let's just quickly consider why we would do things this way
                - Can anyone think of some reasons?
                
                - Well, let's take a look at 
                - I don't need to know what's in there




                - Well, one of the good things is known as abstraction, being able to look at things without having to understand the details behind them
                - So for example, with our 
                - Encapsulation
                - modularity
                - abstraction: Being able to look at 2 wheel and 4 wheel as just a vehicle rather than the specifics


                - Now, something I didn't tell you was that it's possible to hide certain 



                [TODO]




        - Exercises
                - Since we haven't gotten into any code yet, there's no exercises yet, but we've gone through a lot of terms so I'm going to ask questions about them instead
                - What is:
                    - A class
                    - A data field
                    - A method
                    - A subclass
                    - Inheritance
                    - Polymorphism
                - OK, so that's a really brief intro to OO programming. There's a lot more to it, such as abstract classes, interfaces, design patterns, and more, but that'll all come up when you take a proper course on OO.
                - Questions so far?
                - OK, so now we'll move onto how this all happens in Python




        - Things I still want to add
            - Private and public and why we use them
